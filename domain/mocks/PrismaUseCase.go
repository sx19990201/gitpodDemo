// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fire_boom/domain"
	mock "github.com/stretchr/testify/mock"
)

// PrismaUseCase is an autogenerated mock type for the PrismaUseCase type
type PrismaUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, p
func (_m *PrismaUseCase) Create(ctx context.Context, p *domain.Prisma) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Prisma) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PrismaUseCase) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fetch provides a mock function with given fields: ctx
func (_m *PrismaUseCase) Fetch(ctx context.Context) ([]domain.Prisma, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Prisma
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Prisma); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Prisma)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PrismaUseCase) GetByID(ctx context.Context, id int64) (domain.Prisma, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Prisma
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.Prisma); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Prisma)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, p
func (_m *PrismaUseCase) Update(ctx context.Context, p *domain.Prisma) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Prisma) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPrismaUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPrismaUseCase creates a new instance of PrismaUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPrismaUseCase(t mockConstructorTestingTNewPrismaUseCase) *PrismaUseCase {
	mock := &PrismaUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
