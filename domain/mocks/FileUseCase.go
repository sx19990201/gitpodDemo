// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fire_boom/domain"
	mock "github.com/stretchr/testify/mock"
)

// FileUseCase is an autogenerated mock type for the FileUseCase type
type FileUseCase struct {
	mock.Mock
}

// FileRead provides a mock function with given fields: ctx, path
func (_m *FileUseCase) FileRead(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileWrite provides a mock function with given fields: ctx, fileParam
func (_m *FileUseCase) FileWrite(ctx context.Context, fileParam *domain.File) error {
	ret := _m.Called(ctx, fileParam)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) error); ok {
		r0 = rf(ctx, fileParam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: ctx, f
func (_m *FileUseCase) Store(ctx context.Context, f *domain.File) (int64, error) {
	ret := _m.Called(ctx, f)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) int64); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.File) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, f
func (_m *FileUseCase) Update(ctx context.Context, f *domain.File) (int64, error) {
	ret := _m.Called(ctx, f)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) int64); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.File) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileUseCase creates a new instance of FileUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileUseCase(t mockConstructorTestingTNewFileUseCase) *FileUseCase {
	mock := &FileUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
