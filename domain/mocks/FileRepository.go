// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fire_boom/domain"
	mock "github.com/stretchr/testify/mock"
)

// FileRepository is an autogenerated mock type for the FileRepository type
type FileRepository struct {
	mock.Mock
}

// CheckExist provides a mock function with given fields: ctx, auth
func (_m *FileRepository) CheckExist(ctx context.Context, auth *domain.File) (domain.File, error) {
	ret := _m.Called(ctx, auth)

	var r0 domain.File
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) domain.File); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.File) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileRead provides a mock function with given fields: ctx, path
func (_m *FileRepository) FileRead(ctx context.Context, path string) ([]byte, error) {
	ret := _m.Called(ctx, path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileWrite provides a mock function with given fields: ctx, fileParam
func (_m *FileRepository) FileWrite(ctx context.Context, fileParam *domain.File) error {
	ret := _m.Called(ctx, fileParam)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) error); ok {
		r0 = rf(ctx, fileParam)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, fileID
func (_m *FileRepository) GetByID(ctx context.Context, fileID uint) (domain.File, error) {
	ret := _m.Called(ctx, fileID)

	var r0 domain.File
	if rf, ok := ret.Get(0).(func(context.Context, uint) domain.File); ok {
		r0 = rf(ctx, fileID)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *FileRepository) GetByName(ctx context.Context, name string) (domain.File, error) {
	ret := _m.Called(ctx, name)

	var r0 domain.File
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.File); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(domain.File)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, f
func (_m *FileRepository) Store(ctx context.Context, f *domain.File) (int64, error) {
	ret := _m.Called(ctx, f)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) int64); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.File) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, f
func (_m *FileRepository) Update(ctx context.Context, f *domain.File) (int64, error) {
	ret := _m.Called(ctx, f)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.File) int64); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.File) error); ok {
		r1 = rf(ctx, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFileRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFileRepository creates a new instance of FileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFileRepository(t mockConstructorTestingTNewFileRepository) *FileRepository {
	mock := &FileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
