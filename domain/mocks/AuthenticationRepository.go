// Code generated by mockery v2.13.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/fire_boom/domain"
	mock "github.com/stretchr/testify/mock"
)

// AuthenticationRepository is an autogenerated mock type for the AuthenticationRepository type
type AuthenticationRepository struct {
	mock.Mock
}

// CheckExist provides a mock function with given fields: ctx, auth
func (_m *AuthenticationRepository) CheckExist(ctx context.Context, auth *domain.FbAuthentication) (domain.FbAuthentication, error) {
	ret := _m.Called(ctx, auth)

	var r0 domain.FbAuthentication
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FbAuthentication) domain.FbAuthentication); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Get(0).(domain.FbAuthentication)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.FbAuthentication) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *AuthenticationRepository) Delete(ctx context.Context, id uint) (int64, error) {
	ret := _m.Called(ctx, id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uint) int64); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAuthentication provides a mock function with given fields: ctx
func (_m *AuthenticationRepository) FindAuthentication(ctx context.Context) ([]domain.FbAuthentication, error) {
	ret := _m.Called(ctx)

	var r0 []domain.FbAuthentication
	if rf, ok := ret.Get(0).(func(context.Context) []domain.FbAuthentication); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.FbAuthentication)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, name
func (_m *AuthenticationRepository) GetByName(ctx context.Context, name string) (domain.FbAuthentication, error) {
	ret := _m.Called(ctx, name)

	var r0 domain.FbAuthentication
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.FbAuthentication); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(domain.FbAuthentication)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, auth
func (_m *AuthenticationRepository) Store(ctx context.Context, auth *domain.FbAuthentication) (int64, error) {
	ret := _m.Called(ctx, auth)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FbAuthentication) int64); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.FbAuthentication) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, auth
func (_m *AuthenticationRepository) Update(ctx context.Context, auth *domain.FbAuthentication) (int64, error) {
	ret := _m.Called(ctx, auth)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FbAuthentication) int64); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.FbAuthentication) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewAuthenticationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthenticationRepository creates a new instance of AuthenticationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthenticationRepository(t mockConstructorTestingTNewAuthenticationRepository) *AuthenticationRepository {
	mock := &AuthenticationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
